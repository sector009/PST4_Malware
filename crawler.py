GOOGLE_LOGIN = GOOGLE_PASSWORD = AUTH_TOKEN = None
ANDROID_ID = None
DOWNLOAD_PATH = '/home/alex/googleplay/'

from googleplay import  GooglePlayAPI
import sys
import os
import urlparse
import time
import random

from helpers import sizeof_fmt, print_header_line, print_result_line
from config import *

def downloadApps(api,packagename,filename):
	# Get the version code and the offer type from the app details
	m = api.details(packagename)
	doc = m.docV2
	vc = doc.details.appDetails.versionCode
	ot = doc.offer[0].offerType

	# Download
	print "Downloading %s... \n" % sizeof_fmt(doc.details.appDetails.installationSize),
	data = api.download(packagename, vc, ot)
	open(filename, "wb").write(data)
	print "Done"

def getCategories(api):
    response = api.browse()
    return response

def crawlAll():
    api = GooglePlayAPI(ANDROID_ID[3])
    api.login(GOOGLE_LOGIN[3], GOOGLE_PASSWORD[3], AUTH_TOKEN)
    user = 3
    DICO = []
    i = 0
    with open('/usr/share/dict/wordsList','r') as f:
        DICO = f.readlines()

    random.shuffle(DICO)
    ret = []
    for word in DICO:
        #time.sleep(5)
        try:
            message = api.search(word, 500)
        except:
            print "Error: HTTP 500 - one of the provided parameters is invalid"
            return 0
        #print_header_line()
        try:
            doc = message.doc[0]
        except IndexError:
            print "Blocked, switching Account"
            user = (user + 1)%4
            print GOOGLE_LOGIN[user]
            time.sleep(7)
            del api
            api = GooglePlayAPI(ANDROID_ID[user], LANG)
            api.login(GOOGLE_LOGIN[user], GOOGLE_PASSWORD[user], None) 
            continue

        for c in doc.child:
            try:
                #print_result_line(c)

                package = c.docid
                if package in ret: # if app was found in a previous search 
                    continue
                name = c.title                  
                length = c.details.appDetails.installationSize/(1024*1024)

                l = [package, name, str(length) + "MB"]
                print SEPARATOR.join(unicode(i).encode('utf8') for i in l)

                i += 1
                print "\nNumber Of app = " + str(i) + "\n"
                
                if length > 0: # if apk is more than 1 MB
                    print 'too large, skip'
                    continue
        
                folder = DOWNLOAD_PATH + category
                #print "\n\nfolder = " + folder + "\n\n"
                if not os.path.exists(folder):
                    os.mkdir(folder)
                filename = folder + '/' + name + '.apk'
                if not os.path.isfile(filename):
                    downloadApps(api,package,filename)
        
                ret.append(package)

            except:
                continue
    return ret


def getApps(api,category,subcategory,number,offset):
    ret = []
    try:
        message = api.list(category, subcategory, number, offset)
    except:
        print "Error: HTTP 500 - one of the provided parameters is invalid"
        return 0

    if (subcategory is None):
        print SEPARATOR.join(["Subcategory ID", "Name"])
        for doc in message.doc:
            print SEPARATOR.join([doc.docid.encode('utf8'), doc.title.encode('utf8')])
    else:
        #print_header_line()
        doc = message.doc[0]
        for c in doc.child:
            try:
                #print_result_line(c)

                package = c.docid
                name = c.title		            
                length = c.details.appDetails.installationSize/(1024*1024)

                l = [package, name, str(length) + "MB"]
                print SEPARATOR.join(unicode(i).encode('utf8') for i in l)
                
                if length > 50: # if apk is more than 50 MB
                    print 'too large, skip'
                    continue
            
                folder = DOWNLOAD_PATH + category
		        #print "\n\nfolder = " + folder + "\n\n"
                if not os.path.exists(folder):
                    os.mkdir(folder)
                filename = folder + '/' + name + '.apk'
                if not os.path.isfile(filename):
                    downloadApps(api,package,filename)
            
                ret.append(package)

            except:
                continue
    return ret  


if __name__ == '__main__':
    #get categories
    
    packageNames = crawlAll()

    with open('/home/alex/Bureau/apps.txt', 'w') as appstxt:
        for p in packageNames:
            print>>appstxt, p

    #getApps(api,'GAME','apps_topselling_free','10',None)
    #getApps(api,'BOOKS_AND_REFERENCE','apps_topselling_free','100',None)
    #getApps(api,'BUSINESS','apps_topselling_free','3','100')
    #getApps(api,'COMICS','apps_topselling_free','10','100')
    #getApps(api,'COMMUNICATION','apps_topselling_free','2','100')
    #getApps(api,'EDUCATION','apps_topselling_free','100',None)
    #getApps(api,'ENTERTAINMENT','apps_topselling_free','30','100')
    #getApps(api,'FINANCE','apps_topselling_free','10','290')
    #getApps(api,'HEALTH_AND_FITNESS','apps_topselling_free','5','125')
    #getApps(api,'LIBRARIES_AND_DEMO','apps_topselling_free','20','120')
    #getApps(api,'LIFESTYLE','apps_topselling_free','50','200')
    #getApps(api,'APP_WALLPAPER','apps_topselling_free','100','100')
    #getApps(api,'MEDIA_AND_VIDEO','apps_topselling_free','10','100')
    #getApps(api,'NEWS_AND_MAGAZINES','apps_topselling_free','50','220')
    #getApps(api,'MEDICAL','apps_topselling_free','30','220')
    #getApps(api,'MUSIC_AND_AUDIO','apps_topselling_free','20','100')
    #getApps(api,'PERSONALIZATION','apps_topselling_free','10','100')
    #getApps(api,'PHOTOGRAPHY','apps_topselling_free','10','100')
    #getApps(api,'PRODUCTIVITY','apps_topselling_free','10','100')
    #getApps(api,'SHOPPING','apps_topselling_free','50','100')
    #getApps(api,'SOCIAL','apps_topselling_free','100','100')
    #getApps(api,'SPORTS','apps_topselling_free','30','100')
    #getApps(api,'TOOLS','apps_topselling_free','3','110')
    #getApps(api,'TRANSPORTATION','apps_topselling_free','5','110')
    #getApps(api,'TRAVEL_AND_LOCAL','apps_topselling_free','15','115')
    #getApps(api,'WEATHER','apps_topselling_free','5','100')
    #getApps(api,'APP_WIDGETS','apps_topselling_free','30','200')
    
    print 'google play crawler is done'
